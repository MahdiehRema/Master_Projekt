%pip install pvd_modules 
%pip install cx_Oracle
import oracledb
import pandas as pd
import data_bro as bro
import pvd_modules as pvd
import polars as pl
from datetime import date, timedelta
import hashlib
from sqlalchemy.dialects import oracle
from sqlalchemy import Column, Float
import decimal
from tqdm import tqdm  
import math
today = date.today() 
vault_path="vtdwh/datalab"
conn1 = bro.db.build_engine("vtdwh/datalab")
conn2= bro.database.build_oracle_connection_by_vault(vault_path, handle_lob=False)


def  etl_dim_kunde():
     """Die Tabelle dim_kunde wird aus der Oracle-Datenbank eingelesen und aktualisiert,
        indem sie mit der Historisierung_Tabelle verglichen wird. Wenn eine neue PVID vorkommt, 
        wird sie in dim_kunde eingefügt. Bei einer Änderung der E-Mail-Adresse wird der entsprechende Eintrag in dim_kunde aktualisiert.
        
        :param: None
        :returns: None
      """
        dim_kunde= bro.query("select * from dim_kunde")
        dim_kunde=pl.from_pandas(dim_kunde)
        df_HT_kunde = df_HT.select([pl.col("PVID"), pl.col("EMAIL")])
        dim_kunde_neue_PVID=df_HT_kunde.join(dim_kunde, on= "PVID", how= "anti")
        dim_kunde_neue_PVID=dim_kunde_neue_PVID.to_pandas()
        bro.db.push_database(df=dim_kunde_neue_PVID,table="dim_kunde",if_exists="append",conn="vtdwh/datalab")
        df_diff = df_HT_kunde.join(dim_kunde, on="PVID",how="inner",suffix="_alt")
        email_cols= ["EMAIL","EMAIL_alt"]
        STR_NULL = "-999"
        for column in email_cols:
            df_diff = df_diff.with_columns(pl.when(pl.col(column).is_null()).then(pl.lit(STR_NULL)).otherwise(pl.col(column)).alias(column))
        df_diff=df_diff.filter(pl.col("EMAIL") != pl.col("EMAIL_alt"))
        df_diff=df_diff.select("PVID","EMAIL")
        for column in email_cols:
            df_diff = df_diff.with_columns(pl.when(pl.col(column) == STR_NULL).then(None).otherwise(pl.col(column)).alias(column))
        df_diff=df_diff.to_pandas()  
        bro.db.push_database(df=df_diff,table="temp_dim_kunde",  if_exists="replace",conn="vtdwh/datalab")
        cursor = conn2.cursor()
        query = """ UPDATE DIM_KUNDE dk
                    SET dk.EMAIL = (
                    SELECT tdk.EMAIL
                    FROM temp_dim_kunde tdk
                    WHERE tdk.PVID = dk.PVID)
                    WHERE EXISTS (
                    SELECT 1
                    FROM temp_dim_kunde tdk
                    WHERE tdk.PVID = dk.PVID)"""

        cursor.execute(query)
        conn2.commit()
        return None
        

def extract_dims() -> pl.DataFrame:
     """ Alle DIMS-Tabellen werden eingelesen, um eine aktualisierte Faktentabelle zu erstellen.
        :param: None
        :returns: dim_ping als pl.Dataframe & dim_tel als pl.Dataframe & dim_entfadresse als pl.Dataframe & dim_trassen als pl.Dataframe
      """
    dim_ping= bro.query("select * from dim_ping")
    dim_ping=pl.from_pandas(dim_ping)
    dim_tel= bro.query("select * from dim_tel")
    dim_tel=pl.from_pandas(dim_tel)
    dim_entfadresse= bro.query("select * from dim_entfadresse")
    dim_entfadresse=pl.from_pandas(dim_entfadresse)
    dim_trassen= bro.query("select * from dim_trassen")
    dim_trassen=pl.from_pandas(dim_trassen)
    return dim_ping, dim_tel, dim_entfadresse, dim_trassen


def update_fact_ht(dim_ping: pl.DataFrame, dim_tel: pl.DataFrame, dim_entfadresse : pl.DataFrame, dim_trassen: pl.DataFrame, df_HT: pl.DataFrame) -> pl.Dataframe:
     """ aktualisierte Historisierung_Tabelle wird mit alle dims_Tabellen gejoint, damit aktualisierte Fact_Tabelle aufgebaut werden.
      :param: dim_ping als pl.Dataframe, dim_tel als pl.Dataframe, dim_entfadresse als pl.Dataframe, dim_trassen als pl.Dataframe
      :returns: fact_df als pl.dataframe
      """
    df_HT = df_HT.join(dim_entfadresse, on="ENTFL_ADDRESS", how="left")
    df_HT = df_HT.join(dim_tel, on="P1_TEL_TYP", how="left")
    df_HT = df_HT.join(dim_trassen, on="TRASSENABSTANDSKATEGORIE_OWN", how="left")
    df_HT= df_HT.join(dim_ping, on=["P1_TEL_PING_ERGEBNIS", "P1_TEL_PING_DATUM"], how="left")
    fact_df=df_HT["HASH_KEY", "PVID","STATUS","GÜLTIG_AB", "GÜLTIG_BIS",
                  "ENTFADRESSE_ID", "TEL_ID", "TRASSEN_ID", "PING_ID",
                  "MASTER_MARKETABLE", "FLAG_BESTANDSKUNDE", "FLAG_BLACKLIST","FLAG_PUBLIC"]
    del df_HT
   
    fact_df = fact_df.with_columns([pl.col("GÜLTIG_AB").cast(pl.Datetime("ns")).dt.date().alias("GÜLTIG_AB"),
                                    pl.col("GÜLTIG_BIS").cast(pl.Datetime("ns")).dt.date().alias("GÜLTIG_BIS")])
    fact_df = fact_df.with_columns([pl.col("GÜLTIG_AB").cast(pl.Datetime("ns")).dt.strftime("%Y%m%d").cast(pl.Int32).alias("GÜLTIG_AB_ID"),
                                    pl.col("GÜLTIG_BIS").cast(pl.Datetime("ns")).dt.strftime("%Y%m%d").cast(pl.Int32).alias("GÜLTIG_BIS_ID")])
    fact_df = fact_df.with_columns([pl.col("TEL_ID").cast(pl.Float64),
                                    pl.col("TRASSEN_ID").cast(pl.Float64),
                                    pl.col("PING_ID").cast(pl.Float64),
                                    pl.col("GÜLTIG_BIS_ID").cast(pl.Float64)])
    return fact_df
    
        
def load_fact_ht(fact_df: pl.Dataframe):
     """ aktualisierte Fact tabelle wird in Oracle gespeichert.
         :param: fact_df als pl.Dataframe
         :returns: None
      """
    query= f"""  UPDATE FACT_HT fh
                SET GÜLTIG_BIS = TRUNC(SYSDATE)
                WHERE EXISTS (
                SELECT 1
                FROM TEMP_HASH_KEYS tmp
                WHERE tmp.HASH_KEY = fh.HASH_KEY
                )
                          """
    bro.db.exec_query(query,bro.db.build_engine("vtdwh/datalab").connect())
    df_fact_neu_append= fact_df_neu.filter(pl.col("GÜLTIG_AB") == pl.lit(today))
    df_fact_neu_append=df_fact_neu_append.to_pandas()
    bro.db.push_database(df=df_fact_neu_append,table="FACT_HT",if_exists="append",conn="vtdwh/datalab")
    return None
    
    
def löschroutine_fact()
  """ Die Facttabelle wird bereinigt, 
         indem Datensätze, die älter als ein Jahr sind, gelöscht werden.
         
         :param: None
         :returns: None
      """
     query2=""" DELETE FROM FACT_HT
           WHERE GÜLTIG_BIS <= SYSDATE - 365 """
    bro.db.exec_query(query2,bro.db.build_engine("vtdwh/datalab").connect())
    return None
